# This is a locally used development-buildout (no zeo with some useful
# tools) common to all sites.

[buildout]
extends =
    https://raw.githubusercontent.com/litsol/CWI_buildout/5.0.5/linkto/base.cfg

# If you want you can have you eggs picked
# allow-picked-versions = true

# Checkout everything enumerated in source. mr.developer included in base.cfg.
auto-checkout = *
sources-dir = src-mrd

# Locally you might want some nice development addons:
eggs +=
    plone.app.debugtoolbar
    Products.DocFinderTab
    Products.PrintingMailHost
    plone.reload
    collective.backtowork
    raven
# Allow debugging restricted code
    Products.Ienablesettrace
# Post-mortem debugging
    Products.PDBDebugMode
# Quota
    mordac.quota
# Transmogrifier
    collective.transmogrifier
    plone.app.transmogrifier
    transmogrify.dexterity
    cwi.transmogrifier

test-eggs +=
    mordac.quota [test]

zcml +=
    collective.transmogrifier
    plone.app.transmogrifier
    transmogrify.dexterity

parts +=
    instance
    test
    coverage
    coverage-test
    packages
    zopepy
    checkversions
    ploneversioncheck
    i18ndude
#    i18nize-XXX
#    i18nize-all
#    i18nize-diff
    codeintel
    stacktrace-script
    code-analysis
    mrbob
    robot

extensions +=
    plone.versioncheck

[ports]
# Adjust the ports if necessary (e.g. if you run multiple sites without modifying /etc/hosts)
varnish = 8080
haproxy = 8081
zeoclient1 = 8082
zeoclient2 = 8083
zeoclient_debug = 8084
zeoserver = 8100
instance = 8080

[bindips]
# Edit /etc/hosts so you can use "localip = ${buildout:site}" to run all sites on the same port.
instance = 0.0.0.0
zeoserver = 127.0.0.1
varnish = 127.0.0.1
haproxy = 127.0.0.1
zeoclient1 = 127.0.0.1
zeoclient2 = 127.0.0.1
zeoclient_debug = 127.0.0.1

[instance]
recipe = plone.recipe.zope2instance
user = ${buildout:login}:${buildout:password}
http-address = ${bindips:instance}:${ports:instance}
debug-mode = on
verbose-security = on
deprecation-warnings = on
eggs = ${buildout:eggs}
zcml = ${buildout:zcml}
environment-vars = ${buildout:prod-environment}

[test]
recipe = zc.recipe.testrunner
eggs =
    ${buildout:test-eggs}
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']

[coverage]
recipe = zc.recipe.egg
eggs = coverage

[coverage-test]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    # Remove old results
    echo "Erase old coverage results."
    bin/coverage erase
    # Collect test coverage results for all packages
    echo "Run test coverage analysis for all packages."
    bin/coverage run -p --source=src bin/test || exit 1
    echo "Create test coverage report."
    # Combine all package analysis
    bin/coverage combine
    # Generates a "coverage.xml" file that Jenkins can read and process from the
    # ".coverage" file that the coverage report created.
    bin/coverage html -i
    echo "Test coverage report finished. See parts/test/htmlreport/index.html"
output = ${buildout:directory}/bin/coverage-test
mode = 755

[packages]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}
packages = ${instance:location}/lib/python ./

[zopepy]
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = zopepy

[checkversions]
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

[ploneversioncheck]
recipe = zc.recipe.egg
eggs = plone.versioncheck

[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs =
    i18ndude
    potools

#[i18nize-XXX]
#recipe = collective.recipe.template
#input = ${buildout:directory}/templates/i18nize.in
#output = ${buildout:bin-directory}/i18nize-XXX
#mode = 775
#dollar = $
#domain = XXX.XXX
#packagepath = ${buildout:directory}/src/XXX.XXX/src/XXX/XXX
#languages = ${buildout:languages}

[i18nize-all]
recipe = collective.recipe.template
mode = 775
input = inline:
    #!/bin/bash
    ${:update_po_command}
output = ${buildout:bin-directory}/i18nize_all
update_po_command = ${i18nize-xxx:output}
#update_po_command = ${i18nize-site:output} && ${i18nize-theme:output}

[i18nize-diff]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/i18ndiff.in
output = ${buildout:bin-directory}/podiff_all
mode = 755
repo = ssh://gitlab@git.starzel.de:XXX/XXX.git

[codeintel]
recipe = corneti.recipes.codeintel
eggs = ${instance:eggs}
extra-paths = ${packages:location}

[stacktrace-script]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/stack.sh.tmpl
output = ${buildout:bin-directory}/stack.sh
mode = 755

[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src
i18ndude-bin = ${buildout:bin-directory}/i18ndude
find-untranslated = True
flake8-max-complexity = 19
flake8-exclude = bootstrap.py,bootstrap-buildout.py,docs,*.egg,setup.py,collective.*,plone.*
flake8-ignore-names = setUp,tearDown,setUpZope,setUpPloneSite,getNonInstallableProfiles,configurationContext
flake8-ignore = E123
return-status-codes = True
multiprocessing = True
flake8-extensions =
    flake8-blind-except
    flake8-coding
    flake8-debugger
    flake8-print
    flake8-quotes
    flake8-pep3101
    flake8-deprecated
    flake8-plone-hasattr
    flake8-plone-api
    flake8-commas
    pep8-naming

[mrbob]
recipe = zc.recipe.egg
eggs =
    mr.bob
    bobtemplates.plone
    
[robot]
recipe = zc.recipe.egg
eggs =
    Pillow
    ${test:eggs}
    plone.app.robotframework[debug,ride,reload]
scripts =
    robot-server
    robot

[sources]
mordac.quota = git https://github.com/litsol/mordac.quota.git
cwi.transmogrifier = git https://@scm.cwi.nl/ITF/cwi.transmogrifier
